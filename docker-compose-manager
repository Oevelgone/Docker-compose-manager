#!/bin/bash

## Debug options ##
# If this options are set to - instead of +, debug option is active
set -x  # Command traces before executing commands
set +v  # Shell input lines as they are read

# Resolving Project Path
SOURCE="${BASH_SOURCE[0]}"
while [ -h "$SOURCE" ]; do # resolve $SOURCE until the file is no longer a symlink
    PROJECT_PATH="$( cd -P "$( dirname "$SOURCE" )" && pwd )"
    SOURCE="$(readlink "$SOURCE")"
    [[ $SOURCE != /* ]] && SOURCE="$DIR/$SOURCE" # if $SOURCE was a relative symlink, we need to resolve it relative to the path where the symlink file was located
done
declare -r PROJECT_PATH="$( cd -P "$( dirname "$SOURCE" )" && pwd )"
declare -r INCLUDE_PATH="${PROJECT_PATH}/include"

## FUNCTIONS ##

# Include functions file
. ${INCLUDE_PATH}/sharedfunctions

## VARIABLES ##

declare -i port_diff=0

# Define which module is to use

[[ -z $1 ]] && _error "Undefined module."

if [ -e "${PROJECT_PATH}/module/${1}" ]; then
    module_name="$1"
    shift
    declare -r MODULE_PATH="${PROJECT_PATH}/module/${module_name}"
    . ${MODULE_PATH}/${module_name}_mod
    declare -r DOCKERCOMPOSE_FILE="${MODULE_PATH}/docker-compose.yml"
else
    _error "Unknown module $1."
fi

## PARSING ARGS ##

[[ -z $1 ]] && _usage || declare -r first_param=($( eval echo $1 ))

for p in ${first_param[@]}; do
    if [ "$p" == "list" ]; then
        _listDockerContainers "${module_name}"
    elif [ "$p" == "up" ]; then
        declare -a instances_array
        _listDockerContainers "${module_name}" "export"
        for i in `seq ${primary_port_range[0]} 1 ${primary_port_range[1]}`
        do
            if ! containsElement "$i" "${instances_array[@]}"; then
                PRIMARY_PORT=$i
                action="up"
                shift
                if [ -z $args ]; then
                    args=$@
                fi
                break
            elif [ $i == ${primary_port_range[1]} ]; then
                usage_message="up has no more available port in range ${primary_port_range[0]}-${primary_port_range[1]}.
                Down a server or enhance \$primary_port_range in $MODULE_PATH/${module_name}."
            fi
        done
    elif [ "$p" == "cmd" ]; then
        action="cmd"
        shift
        if [ -z $args ]; then
            args=$@
        fi
    elif isnumber $p ; then
        PRIMARY_PORT=$p
        if [ -z $action ]; then
            action=$2
        fi
        shift 2
        if [ -z $args ]; then
            args=$@
        fi
    else
        _usage
    fi

    docker_cmd="docker-compose -f ${DOCKERCOMPOSE_FILE} -p ${module_name}-${PRIMARY_PORT}"

    ## INIT ##

    _portDiff && _updatePorts

    case $action in
        start)
            _start ${args};;
        stop)
            _stop ${args};;
        restart)
            _stop ${args} && _start ${args};;
        up)
            _up ${args};;
        down)
            _down ${args};;
        logs)
            _logs ${args};;
        cred)
            _callCredentials;;
        cmd)
            _command ${args};;
        *)
            _usage;;
    esac
done

